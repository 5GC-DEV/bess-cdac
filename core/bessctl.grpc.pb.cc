// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: bessctl.proto

#include "bessctl.pb.h"
#include "bessctl.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace bess {

static const char* BESSControl_method_names[] = {
  "/bess.BESSControl/ResetAll",
  "/bess.BESSControl/PauseAll",
  "/bess.BESSControl/ResumeAll",
  "/bess.BESSControl/ResetWorkers",
  "/bess.BESSControl/ListWorkers",
  "/bess.BESSControl/AddWorker",
  "/bess.BESSControl/ResetTcs",
  "/bess.BESSControl/ListTcs",
  "/bess.BESSControl/AddTc",
  "/bess.BESSControl/GetTcStats",
  "/bess.BESSControl/ListDrivers",
  "/bess.BESSControl/GetDriverInfo",
  "/bess.BESSControl/ResetPorts",
  "/bess.BESSControl/ListPorts",
  "/bess.BESSControl/CreatePort",
  "/bess.BESSControl/DestroyPort",
  "/bess.BESSControl/GetPortStats",
  "/bess.BESSControl/ResetModules",
  "/bess.BESSControl/ListModules",
  "/bess.BESSControl/CreateModule",
  "/bess.BESSControl/DestroyModule",
  "/bess.BESSControl/GetModuleInfo",
  "/bess.BESSControl/ConnectModules",
  "/bess.BESSControl/DisconnectModules",
  "/bess.BESSControl/AttachTask",
  "/bess.BESSControl/EnableTcpdump",
  "/bess.BESSControl/DisableTcpdump",
  "/bess.BESSControl/KillBess",
};

std::unique_ptr< BESSControl::Stub> BESSControl::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< BESSControl::Stub> stub(new BESSControl::Stub(channel));
  return stub;
}

BESSControl::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ResetAll_(BESSControl_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PauseAll_(BESSControl_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResumeAll_(BESSControl_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetWorkers_(BESSControl_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListWorkers_(BESSControl_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddWorker_(BESSControl_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetTcs_(BESSControl_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTcs_(BESSControl_method_names[7], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddTc_(BESSControl_method_names[8], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTcStats_(BESSControl_method_names[9], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListDrivers_(BESSControl_method_names[10], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDriverInfo_(BESSControl_method_names[11], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetPorts_(BESSControl_method_names[12], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListPorts_(BESSControl_method_names[13], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreatePort_(BESSControl_method_names[14], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyPort_(BESSControl_method_names[15], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPortStats_(BESSControl_method_names[16], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetModules_(BESSControl_method_names[17], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListModules_(BESSControl_method_names[18], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateModule_(BESSControl_method_names[19], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyModule_(BESSControl_method_names[20], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetModuleInfo_(BESSControl_method_names[21], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConnectModules_(BESSControl_method_names[22], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DisconnectModules_(BESSControl_method_names[23], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AttachTask_(BESSControl_method_names[24], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EnableTcpdump_(BESSControl_method_names[25], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DisableTcpdump_(BESSControl_method_names[26], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KillBess_(BESSControl_method_names[27], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BESSControl::Stub::ResetAll(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ResetAll_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::Error>* BESSControl::Stub::AsyncResetAllRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::Error>(channel_.get(), cq, rpcmethod_ResetAll_, context, request);
}

::grpc::Status BESSControl::Stub::PauseAll(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_PauseAll_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::Error>* BESSControl::Stub::AsyncPauseAllRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::Error>(channel_.get(), cq, rpcmethod_PauseAll_, context, request);
}

::grpc::Status BESSControl::Stub::ResumeAll(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ResumeAll_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::Error>* BESSControl::Stub::AsyncResumeAllRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::Error>(channel_.get(), cq, rpcmethod_ResumeAll_, context, request);
}

::grpc::Status BESSControl::Stub::ResetWorkers(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ResetWorkers_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::Error>* BESSControl::Stub::AsyncResetWorkersRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::Error>(channel_.get(), cq, rpcmethod_ResetWorkers_, context, request);
}

::grpc::Status BESSControl::Stub::ListWorkers(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::ListWorkersResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ListWorkers_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::ListWorkersResponse>* BESSControl::Stub::AsyncListWorkersRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::ListWorkersResponse>(channel_.get(), cq, rpcmethod_ListWorkers_, context, request);
}

::grpc::Status BESSControl::Stub::AddWorker(::grpc::ClientContext* context, const ::bess::AddWorkerRequest& request, ::bess::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_AddWorker_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::Error>* BESSControl::Stub::AsyncAddWorkerRaw(::grpc::ClientContext* context, const ::bess::AddWorkerRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::Error>(channel_.get(), cq, rpcmethod_AddWorker_, context, request);
}

::grpc::Status BESSControl::Stub::ResetTcs(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ResetTcs_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::Error>* BESSControl::Stub::AsyncResetTcsRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::Error>(channel_.get(), cq, rpcmethod_ResetTcs_, context, request);
}

::grpc::Status BESSControl::Stub::ListTcs(::grpc::ClientContext* context, const ::bess::ListTcsRequest& request, ::bess::ListTcsResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ListTcs_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::ListTcsResponse>* BESSControl::Stub::AsyncListTcsRaw(::grpc::ClientContext* context, const ::bess::ListTcsRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::ListTcsResponse>(channel_.get(), cq, rpcmethod_ListTcs_, context, request);
}

::grpc::Status BESSControl::Stub::AddTc(::grpc::ClientContext* context, const ::bess::AddTcRequest& request, ::bess::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_AddTc_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::Error>* BESSControl::Stub::AsyncAddTcRaw(::grpc::ClientContext* context, const ::bess::AddTcRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::Error>(channel_.get(), cq, rpcmethod_AddTc_, context, request);
}

::grpc::Status BESSControl::Stub::GetTcStats(::grpc::ClientContext* context, const ::bess::GetTcStatsRequest& request, ::bess::GetTcStatsResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetTcStats_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::GetTcStatsResponse>* BESSControl::Stub::AsyncGetTcStatsRaw(::grpc::ClientContext* context, const ::bess::GetTcStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::GetTcStatsResponse>(channel_.get(), cq, rpcmethod_GetTcStats_, context, request);
}

::grpc::Status BESSControl::Stub::ListDrivers(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::ListDriversResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ListDrivers_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::ListDriversResponse>* BESSControl::Stub::AsyncListDriversRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::ListDriversResponse>(channel_.get(), cq, rpcmethod_ListDrivers_, context, request);
}

::grpc::Status BESSControl::Stub::GetDriverInfo(::grpc::ClientContext* context, const ::bess::GetDriverInfoRequest& request, ::bess::GetDriverInfoResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetDriverInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::GetDriverInfoResponse>* BESSControl::Stub::AsyncGetDriverInfoRaw(::grpc::ClientContext* context, const ::bess::GetDriverInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::GetDriverInfoResponse>(channel_.get(), cq, rpcmethod_GetDriverInfo_, context, request);
}

::grpc::Status BESSControl::Stub::ResetPorts(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ResetPorts_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::Error>* BESSControl::Stub::AsyncResetPortsRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::Error>(channel_.get(), cq, rpcmethod_ResetPorts_, context, request);
}

::grpc::Status BESSControl::Stub::ListPorts(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::ListPortsResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ListPorts_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::ListPortsResponse>* BESSControl::Stub::AsyncListPortsRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::ListPortsResponse>(channel_.get(), cq, rpcmethod_ListPorts_, context, request);
}

::grpc::Status BESSControl::Stub::CreatePort(::grpc::ClientContext* context, const ::bess::CreatePortRequest& request, ::bess::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CreatePort_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::Error>* BESSControl::Stub::AsyncCreatePortRaw(::grpc::ClientContext* context, const ::bess::CreatePortRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::Error>(channel_.get(), cq, rpcmethod_CreatePort_, context, request);
}

::grpc::Status BESSControl::Stub::DestroyPort(::grpc::ClientContext* context, const ::bess::DestroyPortRequest& request, ::bess::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DestroyPort_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::Error>* BESSControl::Stub::AsyncDestroyPortRaw(::grpc::ClientContext* context, const ::bess::DestroyPortRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::Error>(channel_.get(), cq, rpcmethod_DestroyPort_, context, request);
}

::grpc::Status BESSControl::Stub::GetPortStats(::grpc::ClientContext* context, const ::bess::GetPortStatsRequest& request, ::bess::GetPortStatsResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetPortStats_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::GetPortStatsResponse>* BESSControl::Stub::AsyncGetPortStatsRaw(::grpc::ClientContext* context, const ::bess::GetPortStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::GetPortStatsResponse>(channel_.get(), cq, rpcmethod_GetPortStats_, context, request);
}

::grpc::Status BESSControl::Stub::ResetModules(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ResetModules_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::Error>* BESSControl::Stub::AsyncResetModulesRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::Error>(channel_.get(), cq, rpcmethod_ResetModules_, context, request);
}

::grpc::Status BESSControl::Stub::ListModules(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::ListModulesResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ListModules_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::ListModulesResponse>* BESSControl::Stub::AsyncListModulesRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::ListModulesResponse>(channel_.get(), cq, rpcmethod_ListModules_, context, request);
}

::grpc::Status BESSControl::Stub::CreateModule(::grpc::ClientContext* context, const ::bess::CreateModuleRequest& request, ::bess::CreateModuleResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CreateModule_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::CreateModuleResponse>* BESSControl::Stub::AsyncCreateModuleRaw(::grpc::ClientContext* context, const ::bess::CreateModuleRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::CreateModuleResponse>(channel_.get(), cq, rpcmethod_CreateModule_, context, request);
}

::grpc::Status BESSControl::Stub::DestroyModule(::grpc::ClientContext* context, const ::bess::DestroyModuleRequest& request, ::bess::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DestroyModule_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::Error>* BESSControl::Stub::AsyncDestroyModuleRaw(::grpc::ClientContext* context, const ::bess::DestroyModuleRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::Error>(channel_.get(), cq, rpcmethod_DestroyModule_, context, request);
}

::grpc::Status BESSControl::Stub::GetModuleInfo(::grpc::ClientContext* context, const ::bess::GetModuleInfoRequest& request, ::bess::GetModuleInfoResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetModuleInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::GetModuleInfoResponse>* BESSControl::Stub::AsyncGetModuleInfoRaw(::grpc::ClientContext* context, const ::bess::GetModuleInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::GetModuleInfoResponse>(channel_.get(), cq, rpcmethod_GetModuleInfo_, context, request);
}

::grpc::Status BESSControl::Stub::ConnectModules(::grpc::ClientContext* context, const ::bess::ConnectModulesRequest& request, ::bess::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ConnectModules_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::Error>* BESSControl::Stub::AsyncConnectModulesRaw(::grpc::ClientContext* context, const ::bess::ConnectModulesRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::Error>(channel_.get(), cq, rpcmethod_ConnectModules_, context, request);
}

::grpc::Status BESSControl::Stub::DisconnectModules(::grpc::ClientContext* context, const ::bess::DisconnectModulesRequest& request, ::bess::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DisconnectModules_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::Error>* BESSControl::Stub::AsyncDisconnectModulesRaw(::grpc::ClientContext* context, const ::bess::DisconnectModulesRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::Error>(channel_.get(), cq, rpcmethod_DisconnectModules_, context, request);
}

::grpc::Status BESSControl::Stub::AttachTask(::grpc::ClientContext* context, const ::bess::AttachTaskRequest& request, ::bess::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_AttachTask_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::Error>* BESSControl::Stub::AsyncAttachTaskRaw(::grpc::ClientContext* context, const ::bess::AttachTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::Error>(channel_.get(), cq, rpcmethod_AttachTask_, context, request);
}

::grpc::Status BESSControl::Stub::EnableTcpdump(::grpc::ClientContext* context, const ::bess::EnableTcpdumpRequest& request, ::bess::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_EnableTcpdump_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::Error>* BESSControl::Stub::AsyncEnableTcpdumpRaw(::grpc::ClientContext* context, const ::bess::EnableTcpdumpRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::Error>(channel_.get(), cq, rpcmethod_EnableTcpdump_, context, request);
}

::grpc::Status BESSControl::Stub::DisableTcpdump(::grpc::ClientContext* context, const ::bess::DisableTcpdumpRequest& request, ::bess::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DisableTcpdump_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::Error>* BESSControl::Stub::AsyncDisableTcpdumpRaw(::grpc::ClientContext* context, const ::bess::DisableTcpdumpRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::Error>(channel_.get(), cq, rpcmethod_DisableTcpdump_, context, request);
}

::grpc::Status BESSControl::Stub::KillBess(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_KillBess_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bess::Error>* BESSControl::Stub::AsyncKillBessRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bess::Error>(channel_.get(), cq, rpcmethod_KillBess_, context, request);
}

BESSControl::Service::Service() {
  (void)BESSControl_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::Empty, ::bess::Error>(
          std::mem_fn(&BESSControl::Service::ResetAll), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::Empty, ::bess::Error>(
          std::mem_fn(&BESSControl::Service::PauseAll), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::Empty, ::bess::Error>(
          std::mem_fn(&BESSControl::Service::ResumeAll), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::Empty, ::bess::Error>(
          std::mem_fn(&BESSControl::Service::ResetWorkers), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::Empty, ::bess::ListWorkersResponse>(
          std::mem_fn(&BESSControl::Service::ListWorkers), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::AddWorkerRequest, ::bess::Error>(
          std::mem_fn(&BESSControl::Service::AddWorker), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::Empty, ::bess::Error>(
          std::mem_fn(&BESSControl::Service::ResetTcs), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[7],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::ListTcsRequest, ::bess::ListTcsResponse>(
          std::mem_fn(&BESSControl::Service::ListTcs), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[8],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::AddTcRequest, ::bess::Error>(
          std::mem_fn(&BESSControl::Service::AddTc), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[9],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::GetTcStatsRequest, ::bess::GetTcStatsResponse>(
          std::mem_fn(&BESSControl::Service::GetTcStats), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[10],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::Empty, ::bess::ListDriversResponse>(
          std::mem_fn(&BESSControl::Service::ListDrivers), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[11],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::GetDriverInfoRequest, ::bess::GetDriverInfoResponse>(
          std::mem_fn(&BESSControl::Service::GetDriverInfo), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[12],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::Empty, ::bess::Error>(
          std::mem_fn(&BESSControl::Service::ResetPorts), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[13],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::Empty, ::bess::ListPortsResponse>(
          std::mem_fn(&BESSControl::Service::ListPorts), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[14],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::CreatePortRequest, ::bess::Error>(
          std::mem_fn(&BESSControl::Service::CreatePort), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[15],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::DestroyPortRequest, ::bess::Error>(
          std::mem_fn(&BESSControl::Service::DestroyPort), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[16],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::GetPortStatsRequest, ::bess::GetPortStatsResponse>(
          std::mem_fn(&BESSControl::Service::GetPortStats), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[17],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::Empty, ::bess::Error>(
          std::mem_fn(&BESSControl::Service::ResetModules), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[18],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::Empty, ::bess::ListModulesResponse>(
          std::mem_fn(&BESSControl::Service::ListModules), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[19],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::CreateModuleRequest, ::bess::CreateModuleResponse>(
          std::mem_fn(&BESSControl::Service::CreateModule), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[20],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::DestroyModuleRequest, ::bess::Error>(
          std::mem_fn(&BESSControl::Service::DestroyModule), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[21],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::GetModuleInfoRequest, ::bess::GetModuleInfoResponse>(
          std::mem_fn(&BESSControl::Service::GetModuleInfo), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[22],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::ConnectModulesRequest, ::bess::Error>(
          std::mem_fn(&BESSControl::Service::ConnectModules), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[23],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::DisconnectModulesRequest, ::bess::Error>(
          std::mem_fn(&BESSControl::Service::DisconnectModules), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[24],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::AttachTaskRequest, ::bess::Error>(
          std::mem_fn(&BESSControl::Service::AttachTask), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[25],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::EnableTcpdumpRequest, ::bess::Error>(
          std::mem_fn(&BESSControl::Service::EnableTcpdump), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[26],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::DisableTcpdumpRequest, ::bess::Error>(
          std::mem_fn(&BESSControl::Service::DisableTcpdump), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BESSControl_method_names[27],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BESSControl::Service, ::bess::Empty, ::bess::Error>(
          std::mem_fn(&BESSControl::Service::KillBess), this)));
}

BESSControl::Service::~Service() {
}

::grpc::Status BESSControl::Service::ResetAll(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::PauseAll(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ResumeAll(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ResetWorkers(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ListWorkers(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::ListWorkersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::AddWorker(::grpc::ServerContext* context, const ::bess::AddWorkerRequest* request, ::bess::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ResetTcs(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ListTcs(::grpc::ServerContext* context, const ::bess::ListTcsRequest* request, ::bess::ListTcsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::AddTc(::grpc::ServerContext* context, const ::bess::AddTcRequest* request, ::bess::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::GetTcStats(::grpc::ServerContext* context, const ::bess::GetTcStatsRequest* request, ::bess::GetTcStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ListDrivers(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::ListDriversResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::GetDriverInfo(::grpc::ServerContext* context, const ::bess::GetDriverInfoRequest* request, ::bess::GetDriverInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ResetPorts(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ListPorts(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::ListPortsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::CreatePort(::grpc::ServerContext* context, const ::bess::CreatePortRequest* request, ::bess::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::DestroyPort(::grpc::ServerContext* context, const ::bess::DestroyPortRequest* request, ::bess::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::GetPortStats(::grpc::ServerContext* context, const ::bess::GetPortStatsRequest* request, ::bess::GetPortStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ResetModules(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ListModules(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::ListModulesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::CreateModule(::grpc::ServerContext* context, const ::bess::CreateModuleRequest* request, ::bess::CreateModuleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::DestroyModule(::grpc::ServerContext* context, const ::bess::DestroyModuleRequest* request, ::bess::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::GetModuleInfo(::grpc::ServerContext* context, const ::bess::GetModuleInfoRequest* request, ::bess::GetModuleInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::ConnectModules(::grpc::ServerContext* context, const ::bess::ConnectModulesRequest* request, ::bess::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::DisconnectModules(::grpc::ServerContext* context, const ::bess::DisconnectModulesRequest* request, ::bess::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::AttachTask(::grpc::ServerContext* context, const ::bess::AttachTaskRequest* request, ::bess::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::EnableTcpdump(::grpc::ServerContext* context, const ::bess::EnableTcpdumpRequest* request, ::bess::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::DisableTcpdump(::grpc::ServerContext* context, const ::bess::DisableTcpdumpRequest* request, ::bess::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BESSControl::Service::KillBess(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bess

