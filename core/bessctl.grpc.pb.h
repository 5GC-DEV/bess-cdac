// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: bessctl.proto
#ifndef GRPC_bessctl_2eproto__INCLUDED
#define GRPC_bessctl_2eproto__INCLUDED

#include "bessctl.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace bess {

class BESSControl GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ResetAll(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>> AsyncResetAll(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>>(AsyncResetAllRaw(context, request, cq));
    }
    virtual ::grpc::Status PauseAll(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>> AsyncPauseAll(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>>(AsyncPauseAllRaw(context, request, cq));
    }
    virtual ::grpc::Status ResumeAll(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>> AsyncResumeAll(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>>(AsyncResumeAllRaw(context, request, cq));
    }
    virtual ::grpc::Status ResetWorkers(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>> AsyncResetWorkers(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>>(AsyncResetWorkersRaw(context, request, cq));
    }
    virtual ::grpc::Status ListWorkers(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::ListWorkersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::ListWorkersResponse>> AsyncListWorkers(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::ListWorkersResponse>>(AsyncListWorkersRaw(context, request, cq));
    }
    virtual ::grpc::Status AddWorker(::grpc::ClientContext* context, const ::bess::AddWorkerRequest& request, ::bess::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>> AsyncAddWorker(::grpc::ClientContext* context, const ::bess::AddWorkerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>>(AsyncAddWorkerRaw(context, request, cq));
    }
    virtual ::grpc::Status ResetTcs(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>> AsyncResetTcs(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>>(AsyncResetTcsRaw(context, request, cq));
    }
    virtual ::grpc::Status ListTcs(::grpc::ClientContext* context, const ::bess::ListTcsRequest& request, ::bess::ListTcsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::ListTcsResponse>> AsyncListTcs(::grpc::ClientContext* context, const ::bess::ListTcsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::ListTcsResponse>>(AsyncListTcsRaw(context, request, cq));
    }
    virtual ::grpc::Status AddTc(::grpc::ClientContext* context, const ::bess::AddTcRequest& request, ::bess::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>> AsyncAddTc(::grpc::ClientContext* context, const ::bess::AddTcRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>>(AsyncAddTcRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTcStats(::grpc::ClientContext* context, const ::bess::GetTcStatsRequest& request, ::bess::GetTcStatsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::GetTcStatsResponse>> AsyncGetTcStats(::grpc::ClientContext* context, const ::bess::GetTcStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::GetTcStatsResponse>>(AsyncGetTcStatsRaw(context, request, cq));
    }
    virtual ::grpc::Status ListDrivers(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::ListDriversResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::ListDriversResponse>> AsyncListDrivers(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::ListDriversResponse>>(AsyncListDriversRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDriverInfo(::grpc::ClientContext* context, const ::bess::GetDriverInfoRequest& request, ::bess::GetDriverInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::GetDriverInfoResponse>> AsyncGetDriverInfo(::grpc::ClientContext* context, const ::bess::GetDriverInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::GetDriverInfoResponse>>(AsyncGetDriverInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status ResetPorts(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>> AsyncResetPorts(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>>(AsyncResetPortsRaw(context, request, cq));
    }
    virtual ::grpc::Status ListPorts(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::ListPortsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::ListPortsResponse>> AsyncListPorts(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::ListPortsResponse>>(AsyncListPortsRaw(context, request, cq));
    }
    virtual ::grpc::Status CreatePort(::grpc::ClientContext* context, const ::bess::CreatePortRequest& request, ::bess::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>> AsyncCreatePort(::grpc::ClientContext* context, const ::bess::CreatePortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>>(AsyncCreatePortRaw(context, request, cq));
    }
    virtual ::grpc::Status DestroyPort(::grpc::ClientContext* context, const ::bess::DestroyPortRequest& request, ::bess::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>> AsyncDestroyPort(::grpc::ClientContext* context, const ::bess::DestroyPortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>>(AsyncDestroyPortRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPortStats(::grpc::ClientContext* context, const ::bess::GetPortStatsRequest& request, ::bess::GetPortStatsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::GetPortStatsResponse>> AsyncGetPortStats(::grpc::ClientContext* context, const ::bess::GetPortStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::GetPortStatsResponse>>(AsyncGetPortStatsRaw(context, request, cq));
    }
    // TODO: mclass
    //
    virtual ::grpc::Status ResetModules(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>> AsyncResetModules(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>>(AsyncResetModulesRaw(context, request, cq));
    }
    virtual ::grpc::Status ListModules(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::ListModulesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::ListModulesResponse>> AsyncListModules(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::ListModulesResponse>>(AsyncListModulesRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateModule(::grpc::ClientContext* context, const ::bess::CreateModuleRequest& request, ::bess::CreateModuleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::CreateModuleResponse>> AsyncCreateModule(::grpc::ClientContext* context, const ::bess::CreateModuleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::CreateModuleResponse>>(AsyncCreateModuleRaw(context, request, cq));
    }
    virtual ::grpc::Status DestroyModule(::grpc::ClientContext* context, const ::bess::DestroyModuleRequest& request, ::bess::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>> AsyncDestroyModule(::grpc::ClientContext* context, const ::bess::DestroyModuleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>>(AsyncDestroyModuleRaw(context, request, cq));
    }
    virtual ::grpc::Status GetModuleInfo(::grpc::ClientContext* context, const ::bess::GetModuleInfoRequest& request, ::bess::GetModuleInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::GetModuleInfoResponse>> AsyncGetModuleInfo(::grpc::ClientContext* context, const ::bess::GetModuleInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::GetModuleInfoResponse>>(AsyncGetModuleInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status ConnectModules(::grpc::ClientContext* context, const ::bess::ConnectModulesRequest& request, ::bess::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>> AsyncConnectModules(::grpc::ClientContext* context, const ::bess::ConnectModulesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>>(AsyncConnectModulesRaw(context, request, cq));
    }
    virtual ::grpc::Status DisconnectModules(::grpc::ClientContext* context, const ::bess::DisconnectModulesRequest& request, ::bess::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>> AsyncDisconnectModules(::grpc::ClientContext* context, const ::bess::DisconnectModulesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>>(AsyncDisconnectModulesRaw(context, request, cq));
    }
    virtual ::grpc::Status AttachTask(::grpc::ClientContext* context, const ::bess::AttachTaskRequest& request, ::bess::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>> AsyncAttachTask(::grpc::ClientContext* context, const ::bess::AttachTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>>(AsyncAttachTaskRaw(context, request, cq));
    }
    virtual ::grpc::Status EnableTcpdump(::grpc::ClientContext* context, const ::bess::EnableTcpdumpRequest& request, ::bess::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>> AsyncEnableTcpdump(::grpc::ClientContext* context, const ::bess::EnableTcpdumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>>(AsyncEnableTcpdumpRaw(context, request, cq));
    }
    virtual ::grpc::Status DisableTcpdump(::grpc::ClientContext* context, const ::bess::DisableTcpdumpRequest& request, ::bess::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>> AsyncDisableTcpdump(::grpc::ClientContext* context, const ::bess::DisableTcpdumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>>(AsyncDisableTcpdumpRaw(context, request, cq));
    }
    virtual ::grpc::Status KillBess(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>> AsyncKillBess(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>>(AsyncKillBessRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>* AsyncResetAllRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>* AsyncPauseAllRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>* AsyncResumeAllRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>* AsyncResetWorkersRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::ListWorkersResponse>* AsyncListWorkersRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>* AsyncAddWorkerRaw(::grpc::ClientContext* context, const ::bess::AddWorkerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>* AsyncResetTcsRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::ListTcsResponse>* AsyncListTcsRaw(::grpc::ClientContext* context, const ::bess::ListTcsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>* AsyncAddTcRaw(::grpc::ClientContext* context, const ::bess::AddTcRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::GetTcStatsResponse>* AsyncGetTcStatsRaw(::grpc::ClientContext* context, const ::bess::GetTcStatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::ListDriversResponse>* AsyncListDriversRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::GetDriverInfoResponse>* AsyncGetDriverInfoRaw(::grpc::ClientContext* context, const ::bess::GetDriverInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>* AsyncResetPortsRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::ListPortsResponse>* AsyncListPortsRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>* AsyncCreatePortRaw(::grpc::ClientContext* context, const ::bess::CreatePortRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>* AsyncDestroyPortRaw(::grpc::ClientContext* context, const ::bess::DestroyPortRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::GetPortStatsResponse>* AsyncGetPortStatsRaw(::grpc::ClientContext* context, const ::bess::GetPortStatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>* AsyncResetModulesRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::ListModulesResponse>* AsyncListModulesRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::CreateModuleResponse>* AsyncCreateModuleRaw(::grpc::ClientContext* context, const ::bess::CreateModuleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>* AsyncDestroyModuleRaw(::grpc::ClientContext* context, const ::bess::DestroyModuleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::GetModuleInfoResponse>* AsyncGetModuleInfoRaw(::grpc::ClientContext* context, const ::bess::GetModuleInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>* AsyncConnectModulesRaw(::grpc::ClientContext* context, const ::bess::ConnectModulesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>* AsyncDisconnectModulesRaw(::grpc::ClientContext* context, const ::bess::DisconnectModulesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>* AsyncAttachTaskRaw(::grpc::ClientContext* context, const ::bess::AttachTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>* AsyncEnableTcpdumpRaw(::grpc::ClientContext* context, const ::bess::EnableTcpdumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>* AsyncDisableTcpdumpRaw(::grpc::ClientContext* context, const ::bess::DisableTcpdumpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bess::Error>* AsyncKillBessRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ResetAll(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>> AsyncResetAll(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>>(AsyncResetAllRaw(context, request, cq));
    }
    ::grpc::Status PauseAll(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>> AsyncPauseAll(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>>(AsyncPauseAllRaw(context, request, cq));
    }
    ::grpc::Status ResumeAll(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>> AsyncResumeAll(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>>(AsyncResumeAllRaw(context, request, cq));
    }
    ::grpc::Status ResetWorkers(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>> AsyncResetWorkers(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>>(AsyncResetWorkersRaw(context, request, cq));
    }
    ::grpc::Status ListWorkers(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::ListWorkersResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::ListWorkersResponse>> AsyncListWorkers(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::ListWorkersResponse>>(AsyncListWorkersRaw(context, request, cq));
    }
    ::grpc::Status AddWorker(::grpc::ClientContext* context, const ::bess::AddWorkerRequest& request, ::bess::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>> AsyncAddWorker(::grpc::ClientContext* context, const ::bess::AddWorkerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>>(AsyncAddWorkerRaw(context, request, cq));
    }
    ::grpc::Status ResetTcs(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>> AsyncResetTcs(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>>(AsyncResetTcsRaw(context, request, cq));
    }
    ::grpc::Status ListTcs(::grpc::ClientContext* context, const ::bess::ListTcsRequest& request, ::bess::ListTcsResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::ListTcsResponse>> AsyncListTcs(::grpc::ClientContext* context, const ::bess::ListTcsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::ListTcsResponse>>(AsyncListTcsRaw(context, request, cq));
    }
    ::grpc::Status AddTc(::grpc::ClientContext* context, const ::bess::AddTcRequest& request, ::bess::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>> AsyncAddTc(::grpc::ClientContext* context, const ::bess::AddTcRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>>(AsyncAddTcRaw(context, request, cq));
    }
    ::grpc::Status GetTcStats(::grpc::ClientContext* context, const ::bess::GetTcStatsRequest& request, ::bess::GetTcStatsResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::GetTcStatsResponse>> AsyncGetTcStats(::grpc::ClientContext* context, const ::bess::GetTcStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::GetTcStatsResponse>>(AsyncGetTcStatsRaw(context, request, cq));
    }
    ::grpc::Status ListDrivers(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::ListDriversResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::ListDriversResponse>> AsyncListDrivers(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::ListDriversResponse>>(AsyncListDriversRaw(context, request, cq));
    }
    ::grpc::Status GetDriverInfo(::grpc::ClientContext* context, const ::bess::GetDriverInfoRequest& request, ::bess::GetDriverInfoResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::GetDriverInfoResponse>> AsyncGetDriverInfo(::grpc::ClientContext* context, const ::bess::GetDriverInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::GetDriverInfoResponse>>(AsyncGetDriverInfoRaw(context, request, cq));
    }
    ::grpc::Status ResetPorts(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>> AsyncResetPorts(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>>(AsyncResetPortsRaw(context, request, cq));
    }
    ::grpc::Status ListPorts(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::ListPortsResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::ListPortsResponse>> AsyncListPorts(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::ListPortsResponse>>(AsyncListPortsRaw(context, request, cq));
    }
    ::grpc::Status CreatePort(::grpc::ClientContext* context, const ::bess::CreatePortRequest& request, ::bess::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>> AsyncCreatePort(::grpc::ClientContext* context, const ::bess::CreatePortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>>(AsyncCreatePortRaw(context, request, cq));
    }
    ::grpc::Status DestroyPort(::grpc::ClientContext* context, const ::bess::DestroyPortRequest& request, ::bess::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>> AsyncDestroyPort(::grpc::ClientContext* context, const ::bess::DestroyPortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>>(AsyncDestroyPortRaw(context, request, cq));
    }
    ::grpc::Status GetPortStats(::grpc::ClientContext* context, const ::bess::GetPortStatsRequest& request, ::bess::GetPortStatsResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::GetPortStatsResponse>> AsyncGetPortStats(::grpc::ClientContext* context, const ::bess::GetPortStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::GetPortStatsResponse>>(AsyncGetPortStatsRaw(context, request, cq));
    }
    ::grpc::Status ResetModules(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>> AsyncResetModules(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>>(AsyncResetModulesRaw(context, request, cq));
    }
    ::grpc::Status ListModules(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::ListModulesResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::ListModulesResponse>> AsyncListModules(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::ListModulesResponse>>(AsyncListModulesRaw(context, request, cq));
    }
    ::grpc::Status CreateModule(::grpc::ClientContext* context, const ::bess::CreateModuleRequest& request, ::bess::CreateModuleResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::CreateModuleResponse>> AsyncCreateModule(::grpc::ClientContext* context, const ::bess::CreateModuleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::CreateModuleResponse>>(AsyncCreateModuleRaw(context, request, cq));
    }
    ::grpc::Status DestroyModule(::grpc::ClientContext* context, const ::bess::DestroyModuleRequest& request, ::bess::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>> AsyncDestroyModule(::grpc::ClientContext* context, const ::bess::DestroyModuleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>>(AsyncDestroyModuleRaw(context, request, cq));
    }
    ::grpc::Status GetModuleInfo(::grpc::ClientContext* context, const ::bess::GetModuleInfoRequest& request, ::bess::GetModuleInfoResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::GetModuleInfoResponse>> AsyncGetModuleInfo(::grpc::ClientContext* context, const ::bess::GetModuleInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::GetModuleInfoResponse>>(AsyncGetModuleInfoRaw(context, request, cq));
    }
    ::grpc::Status ConnectModules(::grpc::ClientContext* context, const ::bess::ConnectModulesRequest& request, ::bess::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>> AsyncConnectModules(::grpc::ClientContext* context, const ::bess::ConnectModulesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>>(AsyncConnectModulesRaw(context, request, cq));
    }
    ::grpc::Status DisconnectModules(::grpc::ClientContext* context, const ::bess::DisconnectModulesRequest& request, ::bess::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>> AsyncDisconnectModules(::grpc::ClientContext* context, const ::bess::DisconnectModulesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>>(AsyncDisconnectModulesRaw(context, request, cq));
    }
    ::grpc::Status AttachTask(::grpc::ClientContext* context, const ::bess::AttachTaskRequest& request, ::bess::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>> AsyncAttachTask(::grpc::ClientContext* context, const ::bess::AttachTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>>(AsyncAttachTaskRaw(context, request, cq));
    }
    ::grpc::Status EnableTcpdump(::grpc::ClientContext* context, const ::bess::EnableTcpdumpRequest& request, ::bess::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>> AsyncEnableTcpdump(::grpc::ClientContext* context, const ::bess::EnableTcpdumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>>(AsyncEnableTcpdumpRaw(context, request, cq));
    }
    ::grpc::Status DisableTcpdump(::grpc::ClientContext* context, const ::bess::DisableTcpdumpRequest& request, ::bess::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>> AsyncDisableTcpdump(::grpc::ClientContext* context, const ::bess::DisableTcpdumpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>>(AsyncDisableTcpdumpRaw(context, request, cq));
    }
    ::grpc::Status KillBess(::grpc::ClientContext* context, const ::bess::Empty& request, ::bess::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>> AsyncKillBess(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bess::Error>>(AsyncKillBessRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::bess::Error>* AsyncResetAllRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::Error>* AsyncPauseAllRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::Error>* AsyncResumeAllRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::Error>* AsyncResetWorkersRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::ListWorkersResponse>* AsyncListWorkersRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::Error>* AsyncAddWorkerRaw(::grpc::ClientContext* context, const ::bess::AddWorkerRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::Error>* AsyncResetTcsRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::ListTcsResponse>* AsyncListTcsRaw(::grpc::ClientContext* context, const ::bess::ListTcsRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::Error>* AsyncAddTcRaw(::grpc::ClientContext* context, const ::bess::AddTcRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::GetTcStatsResponse>* AsyncGetTcStatsRaw(::grpc::ClientContext* context, const ::bess::GetTcStatsRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::ListDriversResponse>* AsyncListDriversRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::GetDriverInfoResponse>* AsyncGetDriverInfoRaw(::grpc::ClientContext* context, const ::bess::GetDriverInfoRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::Error>* AsyncResetPortsRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::ListPortsResponse>* AsyncListPortsRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::Error>* AsyncCreatePortRaw(::grpc::ClientContext* context, const ::bess::CreatePortRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::Error>* AsyncDestroyPortRaw(::grpc::ClientContext* context, const ::bess::DestroyPortRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::GetPortStatsResponse>* AsyncGetPortStatsRaw(::grpc::ClientContext* context, const ::bess::GetPortStatsRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::Error>* AsyncResetModulesRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::ListModulesResponse>* AsyncListModulesRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::CreateModuleResponse>* AsyncCreateModuleRaw(::grpc::ClientContext* context, const ::bess::CreateModuleRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::Error>* AsyncDestroyModuleRaw(::grpc::ClientContext* context, const ::bess::DestroyModuleRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::GetModuleInfoResponse>* AsyncGetModuleInfoRaw(::grpc::ClientContext* context, const ::bess::GetModuleInfoRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::Error>* AsyncConnectModulesRaw(::grpc::ClientContext* context, const ::bess::ConnectModulesRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::Error>* AsyncDisconnectModulesRaw(::grpc::ClientContext* context, const ::bess::DisconnectModulesRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::Error>* AsyncAttachTaskRaw(::grpc::ClientContext* context, const ::bess::AttachTaskRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::Error>* AsyncEnableTcpdumpRaw(::grpc::ClientContext* context, const ::bess::EnableTcpdumpRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::Error>* AsyncDisableTcpdumpRaw(::grpc::ClientContext* context, const ::bess::DisableTcpdumpRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::bess::Error>* AsyncKillBessRaw(::grpc::ClientContext* context, const ::bess::Empty& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_ResetAll_;
    const ::grpc::RpcMethod rpcmethod_PauseAll_;
    const ::grpc::RpcMethod rpcmethod_ResumeAll_;
    const ::grpc::RpcMethod rpcmethod_ResetWorkers_;
    const ::grpc::RpcMethod rpcmethod_ListWorkers_;
    const ::grpc::RpcMethod rpcmethod_AddWorker_;
    const ::grpc::RpcMethod rpcmethod_ResetTcs_;
    const ::grpc::RpcMethod rpcmethod_ListTcs_;
    const ::grpc::RpcMethod rpcmethod_AddTc_;
    const ::grpc::RpcMethod rpcmethod_GetTcStats_;
    const ::grpc::RpcMethod rpcmethod_ListDrivers_;
    const ::grpc::RpcMethod rpcmethod_GetDriverInfo_;
    const ::grpc::RpcMethod rpcmethod_ResetPorts_;
    const ::grpc::RpcMethod rpcmethod_ListPorts_;
    const ::grpc::RpcMethod rpcmethod_CreatePort_;
    const ::grpc::RpcMethod rpcmethod_DestroyPort_;
    const ::grpc::RpcMethod rpcmethod_GetPortStats_;
    const ::grpc::RpcMethod rpcmethod_ResetModules_;
    const ::grpc::RpcMethod rpcmethod_ListModules_;
    const ::grpc::RpcMethod rpcmethod_CreateModule_;
    const ::grpc::RpcMethod rpcmethod_DestroyModule_;
    const ::grpc::RpcMethod rpcmethod_GetModuleInfo_;
    const ::grpc::RpcMethod rpcmethod_ConnectModules_;
    const ::grpc::RpcMethod rpcmethod_DisconnectModules_;
    const ::grpc::RpcMethod rpcmethod_AttachTask_;
    const ::grpc::RpcMethod rpcmethod_EnableTcpdump_;
    const ::grpc::RpcMethod rpcmethod_DisableTcpdump_;
    const ::grpc::RpcMethod rpcmethod_KillBess_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ResetAll(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response);
    virtual ::grpc::Status PauseAll(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response);
    virtual ::grpc::Status ResumeAll(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response);
    virtual ::grpc::Status ResetWorkers(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response);
    virtual ::grpc::Status ListWorkers(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::ListWorkersResponse* response);
    virtual ::grpc::Status AddWorker(::grpc::ServerContext* context, const ::bess::AddWorkerRequest* request, ::bess::Error* response);
    virtual ::grpc::Status ResetTcs(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response);
    virtual ::grpc::Status ListTcs(::grpc::ServerContext* context, const ::bess::ListTcsRequest* request, ::bess::ListTcsResponse* response);
    virtual ::grpc::Status AddTc(::grpc::ServerContext* context, const ::bess::AddTcRequest* request, ::bess::Error* response);
    virtual ::grpc::Status GetTcStats(::grpc::ServerContext* context, const ::bess::GetTcStatsRequest* request, ::bess::GetTcStatsResponse* response);
    virtual ::grpc::Status ListDrivers(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::ListDriversResponse* response);
    virtual ::grpc::Status GetDriverInfo(::grpc::ServerContext* context, const ::bess::GetDriverInfoRequest* request, ::bess::GetDriverInfoResponse* response);
    virtual ::grpc::Status ResetPorts(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response);
    virtual ::grpc::Status ListPorts(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::ListPortsResponse* response);
    virtual ::grpc::Status CreatePort(::grpc::ServerContext* context, const ::bess::CreatePortRequest* request, ::bess::Error* response);
    virtual ::grpc::Status DestroyPort(::grpc::ServerContext* context, const ::bess::DestroyPortRequest* request, ::bess::Error* response);
    virtual ::grpc::Status GetPortStats(::grpc::ServerContext* context, const ::bess::GetPortStatsRequest* request, ::bess::GetPortStatsResponse* response);
    // TODO: mclass
    //
    virtual ::grpc::Status ResetModules(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response);
    virtual ::grpc::Status ListModules(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::ListModulesResponse* response);
    virtual ::grpc::Status CreateModule(::grpc::ServerContext* context, const ::bess::CreateModuleRequest* request, ::bess::CreateModuleResponse* response);
    virtual ::grpc::Status DestroyModule(::grpc::ServerContext* context, const ::bess::DestroyModuleRequest* request, ::bess::Error* response);
    virtual ::grpc::Status GetModuleInfo(::grpc::ServerContext* context, const ::bess::GetModuleInfoRequest* request, ::bess::GetModuleInfoResponse* response);
    virtual ::grpc::Status ConnectModules(::grpc::ServerContext* context, const ::bess::ConnectModulesRequest* request, ::bess::Error* response);
    virtual ::grpc::Status DisconnectModules(::grpc::ServerContext* context, const ::bess::DisconnectModulesRequest* request, ::bess::Error* response);
    virtual ::grpc::Status AttachTask(::grpc::ServerContext* context, const ::bess::AttachTaskRequest* request, ::bess::Error* response);
    virtual ::grpc::Status EnableTcpdump(::grpc::ServerContext* context, const ::bess::EnableTcpdumpRequest* request, ::bess::Error* response);
    virtual ::grpc::Status DisableTcpdump(::grpc::ServerContext* context, const ::bess::DisableTcpdumpRequest* request, ::bess::Error* response);
    virtual ::grpc::Status KillBess(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ResetAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ResetAll() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ResetAll() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetAll(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetAll(::grpc::ServerContext* context, ::bess::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bess::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PauseAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PauseAll() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PauseAll() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseAll(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPauseAll(::grpc::ServerContext* context, ::bess::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bess::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResumeAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ResumeAll() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ResumeAll() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResumeAll(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResumeAll(::grpc::ServerContext* context, ::bess::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bess::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResetWorkers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ResetWorkers() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ResetWorkers() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetWorkers(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetWorkers(::grpc::ServerContext* context, ::bess::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bess::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListWorkers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListWorkers() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ListWorkers() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWorkers(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::ListWorkersResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListWorkers(::grpc::ServerContext* context, ::bess::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bess::ListWorkersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddWorker() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_AddWorker() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddWorker(::grpc::ServerContext* context, const ::bess::AddWorkerRequest* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddWorker(::grpc::ServerContext* context, ::bess::AddWorkerRequest* request, ::grpc::ServerAsyncResponseWriter< ::bess::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResetTcs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ResetTcs() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ResetTcs() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetTcs(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetTcs(::grpc::ServerContext* context, ::bess::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bess::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListTcs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListTcs() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ListTcs() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTcs(::grpc::ServerContext* context, const ::bess::ListTcsRequest* request, ::bess::ListTcsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTcs(::grpc::ServerContext* context, ::bess::ListTcsRequest* request, ::grpc::ServerAsyncResponseWriter< ::bess::ListTcsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddTc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddTc() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_AddTc() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTc(::grpc::ServerContext* context, const ::bess::AddTcRequest* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddTc(::grpc::ServerContext* context, ::bess::AddTcRequest* request, ::grpc::ServerAsyncResponseWriter< ::bess::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTcStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTcStats() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetTcStats() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTcStats(::grpc::ServerContext* context, const ::bess::GetTcStatsRequest* request, ::bess::GetTcStatsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTcStats(::grpc::ServerContext* context, ::bess::GetTcStatsRequest* request, ::grpc::ServerAsyncResponseWriter< ::bess::GetTcStatsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListDrivers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListDrivers() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_ListDrivers() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDrivers(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::ListDriversResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDrivers(::grpc::ServerContext* context, ::bess::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bess::ListDriversResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDriverInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetDriverInfo() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetDriverInfo() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDriverInfo(::grpc::ServerContext* context, const ::bess::GetDriverInfoRequest* request, ::bess::GetDriverInfoResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDriverInfo(::grpc::ServerContext* context, ::bess::GetDriverInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::bess::GetDriverInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResetPorts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ResetPorts() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_ResetPorts() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetPorts(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetPorts(::grpc::ServerContext* context, ::bess::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bess::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListPorts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListPorts() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_ListPorts() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPorts(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::ListPortsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPorts(::grpc::ServerContext* context, ::bess::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bess::ListPortsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreatePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreatePort() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_CreatePort() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePort(::grpc::ServerContext* context, const ::bess::CreatePortRequest* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePort(::grpc::ServerContext* context, ::bess::CreatePortRequest* request, ::grpc::ServerAsyncResponseWriter< ::bess::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DestroyPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DestroyPort() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_DestroyPort() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyPort(::grpc::ServerContext* context, const ::bess::DestroyPortRequest* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroyPort(::grpc::ServerContext* context, ::bess::DestroyPortRequest* request, ::grpc::ServerAsyncResponseWriter< ::bess::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPortStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetPortStats() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_GetPortStats() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPortStats(::grpc::ServerContext* context, const ::bess::GetPortStatsRequest* request, ::bess::GetPortStatsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPortStats(::grpc::ServerContext* context, ::bess::GetPortStatsRequest* request, ::grpc::ServerAsyncResponseWriter< ::bess::GetPortStatsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResetModules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ResetModules() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_ResetModules() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetModules(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetModules(::grpc::ServerContext* context, ::bess::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bess::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListModules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListModules() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_ListModules() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModules(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::ListModulesResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListModules(::grpc::ServerContext* context, ::bess::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bess::ListModulesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateModule() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_CreateModule() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateModule(::grpc::ServerContext* context, const ::bess::CreateModuleRequest* request, ::bess::CreateModuleResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateModule(::grpc::ServerContext* context, ::bess::CreateModuleRequest* request, ::grpc::ServerAsyncResponseWriter< ::bess::CreateModuleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DestroyModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DestroyModule() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_DestroyModule() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyModule(::grpc::ServerContext* context, const ::bess::DestroyModuleRequest* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroyModule(::grpc::ServerContext* context, ::bess::DestroyModuleRequest* request, ::grpc::ServerAsyncResponseWriter< ::bess::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetModuleInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetModuleInfo() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_GetModuleInfo() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModuleInfo(::grpc::ServerContext* context, const ::bess::GetModuleInfoRequest* request, ::bess::GetModuleInfoResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModuleInfo(::grpc::ServerContext* context, ::bess::GetModuleInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::bess::GetModuleInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConnectModules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ConnectModules() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_ConnectModules() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectModules(::grpc::ServerContext* context, const ::bess::ConnectModulesRequest* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnectModules(::grpc::ServerContext* context, ::bess::ConnectModulesRequest* request, ::grpc::ServerAsyncResponseWriter< ::bess::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DisconnectModules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DisconnectModules() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_DisconnectModules() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisconnectModules(::grpc::ServerContext* context, const ::bess::DisconnectModulesRequest* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisconnectModules(::grpc::ServerContext* context, ::bess::DisconnectModulesRequest* request, ::grpc::ServerAsyncResponseWriter< ::bess::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AttachTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AttachTask() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_AttachTask() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AttachTask(::grpc::ServerContext* context, const ::bess::AttachTaskRequest* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAttachTask(::grpc::ServerContext* context, ::bess::AttachTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::bess::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EnableTcpdump : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_EnableTcpdump() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_EnableTcpdump() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnableTcpdump(::grpc::ServerContext* context, const ::bess::EnableTcpdumpRequest* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnableTcpdump(::grpc::ServerContext* context, ::bess::EnableTcpdumpRequest* request, ::grpc::ServerAsyncResponseWriter< ::bess::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DisableTcpdump : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DisableTcpdump() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_DisableTcpdump() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisableTcpdump(::grpc::ServerContext* context, const ::bess::DisableTcpdumpRequest* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisableTcpdump(::grpc::ServerContext* context, ::bess::DisableTcpdumpRequest* request, ::grpc::ServerAsyncResponseWriter< ::bess::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_KillBess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_KillBess() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_KillBess() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KillBess(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKillBess(::grpc::ServerContext* context, ::bess::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bess::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ResetAll<WithAsyncMethod_PauseAll<WithAsyncMethod_ResumeAll<WithAsyncMethod_ResetWorkers<WithAsyncMethod_ListWorkers<WithAsyncMethod_AddWorker<WithAsyncMethod_ResetTcs<WithAsyncMethod_ListTcs<WithAsyncMethod_AddTc<WithAsyncMethod_GetTcStats<WithAsyncMethod_ListDrivers<WithAsyncMethod_GetDriverInfo<WithAsyncMethod_ResetPorts<WithAsyncMethod_ListPorts<WithAsyncMethod_CreatePort<WithAsyncMethod_DestroyPort<WithAsyncMethod_GetPortStats<WithAsyncMethod_ResetModules<WithAsyncMethod_ListModules<WithAsyncMethod_CreateModule<WithAsyncMethod_DestroyModule<WithAsyncMethod_GetModuleInfo<WithAsyncMethod_ConnectModules<WithAsyncMethod_DisconnectModules<WithAsyncMethod_AttachTask<WithAsyncMethod_EnableTcpdump<WithAsyncMethod_DisableTcpdump<WithAsyncMethod_KillBess<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ResetAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ResetAll() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ResetAll() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetAll(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PauseAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PauseAll() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PauseAll() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseAll(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResumeAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ResumeAll() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ResumeAll() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResumeAll(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResetWorkers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ResetWorkers() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ResetWorkers() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetWorkers(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListWorkers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListWorkers() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ListWorkers() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWorkers(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::ListWorkersResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddWorker() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_AddWorker() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddWorker(::grpc::ServerContext* context, const ::bess::AddWorkerRequest* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResetTcs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ResetTcs() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ResetTcs() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetTcs(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListTcs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListTcs() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ListTcs() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTcs(::grpc::ServerContext* context, const ::bess::ListTcsRequest* request, ::bess::ListTcsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddTc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddTc() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_AddTc() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTc(::grpc::ServerContext* context, const ::bess::AddTcRequest* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTcStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTcStats() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetTcStats() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTcStats(::grpc::ServerContext* context, const ::bess::GetTcStatsRequest* request, ::bess::GetTcStatsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListDrivers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListDrivers() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_ListDrivers() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDrivers(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::ListDriversResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDriverInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetDriverInfo() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetDriverInfo() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDriverInfo(::grpc::ServerContext* context, const ::bess::GetDriverInfoRequest* request, ::bess::GetDriverInfoResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResetPorts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ResetPorts() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_ResetPorts() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetPorts(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListPorts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListPorts() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_ListPorts() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPorts(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::ListPortsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreatePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreatePort() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_CreatePort() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePort(::grpc::ServerContext* context, const ::bess::CreatePortRequest* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DestroyPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DestroyPort() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_DestroyPort() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyPort(::grpc::ServerContext* context, const ::bess::DestroyPortRequest* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPortStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetPortStats() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_GetPortStats() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPortStats(::grpc::ServerContext* context, const ::bess::GetPortStatsRequest* request, ::bess::GetPortStatsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResetModules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ResetModules() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_ResetModules() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetModules(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListModules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListModules() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_ListModules() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModules(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::ListModulesResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateModule() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_CreateModule() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateModule(::grpc::ServerContext* context, const ::bess::CreateModuleRequest* request, ::bess::CreateModuleResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DestroyModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DestroyModule() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_DestroyModule() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyModule(::grpc::ServerContext* context, const ::bess::DestroyModuleRequest* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetModuleInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetModuleInfo() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_GetModuleInfo() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModuleInfo(::grpc::ServerContext* context, const ::bess::GetModuleInfoRequest* request, ::bess::GetModuleInfoResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConnectModules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ConnectModules() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_ConnectModules() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectModules(::grpc::ServerContext* context, const ::bess::ConnectModulesRequest* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DisconnectModules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DisconnectModules() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_DisconnectModules() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisconnectModules(::grpc::ServerContext* context, const ::bess::DisconnectModulesRequest* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AttachTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AttachTask() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_AttachTask() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AttachTask(::grpc::ServerContext* context, const ::bess::AttachTaskRequest* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EnableTcpdump : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_EnableTcpdump() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_EnableTcpdump() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnableTcpdump(::grpc::ServerContext* context, const ::bess::EnableTcpdumpRequest* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DisableTcpdump : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DisableTcpdump() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_DisableTcpdump() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisableTcpdump(::grpc::ServerContext* context, const ::bess::DisableTcpdumpRequest* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_KillBess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_KillBess() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_KillBess() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KillBess(::grpc::ServerContext* context, const ::bess::Empty* request, ::bess::Error* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace bess


#endif  // GRPC_bessctl_2eproto__INCLUDED
