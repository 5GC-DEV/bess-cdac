syntax = "proto3";

import "error.proto";
package bess;

message ExactMatchCommandAddArg {
  uint64 gate = 1;
  repeated uint64 fields = 2;
}

message ExactMatchCommandDeleteArg {
  repeated uint64 fields = 2;
}

message ExactMatchCommandClearArg {
}

message ExactMatchCommandSetDefaultGateArg {
  uint64 gate = 1;
}

message HashLBCommandSetModeArg {
  enum Mode {
    L2 = 0;
    L3 = 1;
    L4 = 2;
  }
  Mode mode = 1;
}

message HashLBCommandSetGatesArg {
  repeated int64 gates = 1;
}

message IPLookupCommandAddArg {
  string prefix = 1;
  uint64 prefix_len = 2;
  uint64 gate = 3;
}

message IPLookupCommandClearArg {
}

message L2ForwardCommandAddArg {
  message Entry {
    string addr = 1;
    int64 gate = 2;
  }
  repeated Entry entries = 1;
}

message L2ForwardCommandDeleteArg {
  repeated string addrs = 1;
}

message L2ForwardCommandSetDefaultGateArg {
  int64 gate = 1;
}

message L2ForwardCommandLookupArg {
  repeated string addrs = 1;
}

message L2ForwardCommandLookupResponse {
  Error error = 1;
  repeated uint64 gates = 2;
}

message L2ForwardCommandPopulateArg {
  string base = 1;
  int64 count = 2;
  int64 gate_count = 3;
}

message MeasureCommandGetSummaryArg {
}

message MeasureCommandGetSummaryResponse {
  Error error = 1;
  double timestamp = 2;
  uint64 packets = 3;
  uint64 bits = 4;
  uint64 total_latency_ns = 5;
}

message BPFArg {
  message Filter {
    int64 priority = 1;
    string filter = 2;
    int64 gate = 3;
  }
  repeated Filter filters = 1;
}

message BufferArg {
}

message BypassArg {
}

message DumpArg {
  double interval = 1;
}

message EtherEncapArg {
}

message ExactMatchArg {
  message Field {
    uint64 size = 1;
    uint64 mask = 4;
    oneof position {
      string name = 2;
      int64 offset = 3;
    }
  }
  repeated Field fields = 1;
}

message FlowGenArg {
  bytes template = 1;
  double pps = 2;
  double flow_rate = 3;
  double flow_duration = 4;
  enum Dist {
    UNIFORM = 0;
    EXPONENTIAL = 1;
    PARETO = 2;
  }
  Dist arrival = 5;
  Dist duration = 6;
  bool quick_rampup = 7;
}

message GenericDecapArg {
  uint64 bytes = 1;
}

message GenericEncapArg {
  message Field {
    uint64 size = 1;
    oneof attribute {
      string name = 2;
      uint64 value = 3;
    }
  }
  repeated Field fields = 1;
}

message HashLBArg {
  HashLBCommandSetGatesArg gate_arg = 1;
  HashLBCommandSetModeArg mode_arg = 2;
}

message IPEncapArg {
}

message IPLookupArg {
}

message L2ForwardArg {
  int64 size = 1;
  int64 bucket = 2;
}

message MACSwapArg {
}

message MeasureArg {
  int64 warmup = 1;
}

message MergeArg {
}

message MetadataTestArg {
  message Attribute {
    string name = 1;
    int64 size = 2;
  }
  Attribute read = 1;
  Attribute write = 2;
  Attribute update = 3;
}

message NoOpArg {
}

message PortIncArg {
  string port = 1;
  int64 burst = 2;
  bool prefetch = 3;
}

message PortOutArg {
  string port = 1;
}

message QueueIncArg {
  string port = 1;
  uint64 qid = 2;
  int64 burst = 3;
  bool prefetch = 4;
}

message QueueOutArg {
  string port = 1;
  uint64 qid = 2;
}

message QueueArg {
  uint64 size = 1;
  int64 burst = 2;
  bool prefetch = 3;
}

message RandomUpdateArg {
  message Field {
    int64 offset = 1;
    uint64 size = 2;
    uint64 min = 3;
    uint64 max = 4;
  }
  repeated Field fields = 1;
}

message RewriteArg {
  repeated bytes templates = 1;
}

message RoundRobinArg {
  repeated int64 gates = 1;
  enum Mode {
    PACKET = 0;
    BATCH = 1;
  }
  Mode mode = 2;
}

message SetMetadataArg {
  message Attribute {
    string name = 1;
    uint64 size = 2;
    bytes value = 3;
    int64 offset = 4;
  }
  repeated Attribute attrs = 1;
}

message SinkArg {
}

message SourceArg {
  uint64 pkt_size = 1;
  uint64 burst = 2;
}

message SplitArg {
  uint64 size = 1;
  string name = 2;
  int64 offset = 3;
}

message TimestampArg {
}

message UpdateArg {
  message Field {
    int64 offset = 1;
    uint64 size = 2;
    bytes value = 3;
  }
  repeated Field fields = 1;
}

message VLANPopArg {
}

message VLANPushArg {
  uint64 tci = 1;
}

message VLANSplitArg {
}

message VXLANDecapArg {
}

message VXLANEncapArg {
  uint64 dstport = 1;
}

message WildcardMatchArg {
  message Field {
    int64 offset = 1;
    uint64 size = 2;
    string attribute = 3;
  }
  repeated Field fields = 1;
}

message CreateModuleRequest {
  string name = 1;
  string mclass = 2;
  // TODO: args
  oneof arg {
    BPFArg bpf_arg = 3;
    BufferArg buffer_arg = 4;
    BypassArg bypass_arg = 5;
    DumpArg dump_arg = 6;
    EtherEncapArg ether_encap_arg = 7;
    ExactMatchArg exact_match_arg = 8;
    FlowGenArg flow_gen_arg = 9;
    GenericDecapArg generic_decap_arg = 10;
    GenericEncapArg generic_encap_arg = 11;
    HashLBArg hash_lb_arg = 12;
    IPEncapArg ip_encap_arg = 13;
    IPLookupArg ip_lookup_arg = 14;
    L2ForwardArg l2_forward_arg = 15;
    MACSwapArg mac_swap_arg = 16;
    MeasureArg measure_arg = 17;
    MergeArg merge_arg = 18;
    MetadataTestArg metadata_test_arg = 19;
    NoOpArg noop_arg = 20;
    PortIncArg port_inc_arg = 21;
    PortOutArg port_out_arg = 22;
    QueueIncArg queue_inc_arg = 23;
    QueueOutArg queue_out_arg = 24;
    QueueArg queue_arg = 25;
    RandomUpdateArg random_update_arg = 26;
    RewriteArg rewrite_arg = 27;
    RoundRobinArg round_robin_arg = 28;
    SetMetadataArg set_metadata_arg = 29;
    SinkArg sink_arg = 30;
    SourceArg source_arg = 31;
    SplitArg split_arg = 32;
    TimestampArg timestamp_arg = 33;
    UpdateArg update_arg = 34;
    VLANPopArg vlan_pop_arg = 35;
    VLANPushArg vlan_push_arg = 36;
    VLANSplitArg vlan_split_arg = 37;
    VXLANEncapArg vxlan_encap_arg = 38;
    VXLANDecapArg vxlan_decap_arg = 39;
    WildcardMatchArg wildcard_match_arg = 40;
  }
}
