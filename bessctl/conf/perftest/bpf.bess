import time
import pprint

import scapy.all as scapy

Source() -> rewrite::Rewrite() -> bpf::BPF()
bpf:0 -> Sink()      # for unmatched packets
bpf:1 -> Sink()      # for matched packets
unmatched = 0
matched = 1

def run_testcase(exp, test_pkts):
    rewrite.query({'templates': map(lambda x: bytearray(str(x)), test_pkts)})
    bpf.query("reset")
    bpf.query([{'priority': 1, 'filter': exp, 'gate': 1}])

    softnic.resume_all()

    old_stats = softnic.get_module_info(bpf.name)['ogates']
    time.sleep(2)
    new_stats = softnic.get_module_info(bpf.name)['ogates']

    pps_matched = \
            (new_stats[matched]['pkts'] - \
            old_stats[matched]['pkts']) / \
            (new_stats[matched]['timestamp'] - \
            old_stats[matched]['timestamp'])

    pps_unmatched = \
            (new_stats[unmatched]['pkts'] - \
            old_stats[unmatched]['pkts']) / \
            (new_stats[unmatched]['timestamp'] - \
            old_stats[unmatched]['timestamp'])

    pps_total = pps_matched + pps_unmatched

    print 'Total: %8.3fMpps   Matched: %8.3fMpps   Unmatched: %8.3fMpps' %  \
            (pps_total / 1000000.0, 
             pps_matched / 1000000.0, 
             pps_unmatched / 1000000.0)

    softnic.pause_all()

udp_pkt   = scapy.Ether()/scapy.IP()/scapy.UDP()
tcp_pkt   = scapy.Ether()/scapy.IP()/scapy.TCP()
http_pkt1 = scapy.Ether()/scapy.IP()/scapy.TCP(sport=8080, dport=80)
http_pkt2 = scapy.Ether()/scapy.IP()/scapy.TCP(sport=8081, dport=80)
http_pkt3 = scapy.Ether()/scapy.IP()/scapy.TCP(sport=1234, dport=80)
ftp_pkt   = scapy.Ether()/scapy.IP()/scapy.TCP(dport=21)

testcases = [
    ('', [udp_pkt]),
    ('', [udp_pkt, tcp_pkt]),
    ('udp', [udp_pkt]),
    ('udp', [tcp_pkt]),
    ('udp', [udp_pkt, tcp_pkt]),
    ('tcp src portrange 8000-9000 && dst port 80', [http_pkt1]),
    ('tcp src portrange 8000-9000 && dst port 80', [http_pkt1, http_pkt2, http_pkt3]),
    ('tcp src portrange 8000-9000 && dst port 80', [http_pkt1, http_pkt2, http_pkt3, ftp_pkt]),
]

for i, case in enumerate(testcases):
    print
    print 'Testcase %d: %s' % (i, case[0])
    pprint.pprint(case[1])

print
for i, case in enumerate(testcases):
    print 'Testcase %d:\t\t' % i,
    run_testcase(*case)
